<<<<<<< Updated upstream
    private fun getLastLocation(){
        if(checkPermission()){
            if(isLocationEnabled()){
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_FINE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_COARSE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    // TODO: Consider calling
                    //    ActivityCompat#requestPermissions
                    // here to request the missing permissions, and then overriding
                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                    //                                          int[] grantResults)
                    // to handle the case where the user grants the permission. See the documentation
                    // for ActivityCompat#requestPermissions for more details.
                    return
                }
                fusedLocationProviderClient.lastLocation.addOnCompleteListener { task->
                    val location: Location? = task.result
                    if(location == null){
                        newLocationData()
                    }else{
                        Log.d("Debug:" ,"Your Location:"+ location.longitude)
                    }
                }
            }else{
                Toast.makeText(this,"Please Turn on Your device Location", Toast.LENGTH_SHORT).show()
            }
        }else{
            requestPermission()
        }
    }
=======
    private fun getLastLocation(){
        if(checkPermission()){
            if(isLocationEnabled()){
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_FINE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_COARSE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    // TODO: Consider calling
                    //    ActivityCompat#requestPermissions
                    // here to request the missing permissions, and then overriding
                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                    //                                          int[] grantResults)
                    // to handle the case where the user grants the permission. See the documentation
                    // for ActivityCompat#requestPermissions for more details.
                    return
                }
                fusedLocationProviderClient.lastLocation.addOnCompleteListener { task->
                    val location: Location? = task.result
                    if(location == null){
                        newLocationData()
                    }else{
                        Log.d("Debug:" ,"Your Location:"+ location.longitude)
                    }
                }
            }else{
                Toast.makeText(this,"Please Turn on Your device Location", Toast.LENGTH_SHORT).show()
            }
        }else{
            requestPermission()
        }
    }
>>>>>>> Stashed changes
---------------------------------------------------------------------------------------------------------------

    /*private fun findTheNearestStation(itemType: String){
        try {
            val obj = JSONObject(loadJSONFromAsset())
            val stationArray = obj.getJSONArray("stops")
            for (i in 0 until stationArray.length()) {
                val stationDetail = stationArray.getJSONObject(i)
                if(CalcDistance(stationDetail.getString("lat").toDouble(),
                        stationDetail.getString("lon").toDouble() ) <= closestDistance.toDouble() &&
                    stationDetail.getString("stopColorType") == itemType){
                    if(stationsAll.size > 1){
                        var duplicateCounter: Int = 0
                        for(j in 0 until stationsAll.size){
                            if(stationDetail.getString("name") == stationsAll[j].name
                                && stationDetail.getString("stopColorType") == stationsAll[j].stopType) {
                                duplicateCounter++
                            }
                        }
                        if(duplicateCounter == 0){
                            val latitude: Double = stationDetail.getDouble("lat")
                            val longitude: Double = stationDetail.getDouble("lon")
                            val name: String = stationDetail.getString("name")
                            val stationType = if(stationDetail.getString("stopColorType") == "H5"
                                || stationDetail.getString("stopColorType") == "H6"
                                || stationDetail.getString("stopColorType") == "H7"
                                || stationDetail.getString("stopColorType") == "H8"
                                || stationDetail.getString("stopColorType") == "H9"){
                                "RAIL"
                            } else {
                                stationDetail.getString("stopColorType")
                            }
                            stationsAll.add(Station(name, latitude, longitude, stationType))
                        }
                    } else {
                        val latitude: Double = stationDetail.getDouble("lat")
                        val longitude: Double = stationDetail.getDouble("lon")
                        val name: String = stationDetail.getString("name")
                        val stationType = if (stationDetail.getString("stopColorType") == "H5"
                            || stationDetail.getString("stopColorType") == "H6"
                            || stationDetail.getString("stopColorType") == "H7"
                            || stationDetail.getString("stopColorType") == "H8"
                            || stationDetail.getString("stopColorType") == "H9"
                        ) {
                            "RAIL"
                        } else {
                            stationDetail.getString("stopColorType")
                        }
                        stationsAll.add(Station(name, latitude, longitude, stationType))
                    }
                }
            }
        } catch (e: IOException){
            Log.d("IO Exception", e.toString())
        }
    }

    private fun loadJSONFromAsset(): String {
        val json: String?
        try {
            //val inputStream: InputStream = assets.open("stops.json")
            val inputStream = assets
            val size = inputStream.available()
            val buffer = ByteArray(size)
            val charset: Charset = Charsets.UTF_8
            inputStream.read(buffer)
            inputStream.close()
            json = String(buffer, charset)
        }
        catch (ex: IOException) {
            Log.d("BAJ VAN", "NEM KICSI")
            ex.printStackTrace()
            return ""
        }
        Log.d("arrived", "arrived")
        return json
    }

    private fun CalcDistance(pointLat: Double, pointLong: Double) :Double{
        val distanceInMeter: Float
        val loc1 = Location("")
        loc1.latitude = pointLat
        loc1.longitude = pointLong

        val loc2 = Location("")
        loc2.latitude =
        loc2.longitude = actualLong

        distanceInMeter = loc1.distanceTo(loc2)

        return distanceInMeter.toDouble()
    }*/